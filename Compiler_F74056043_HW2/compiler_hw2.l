/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <stdio.h>

extern YYSTYPE yylval; //YYSTYPE
char buf[BUFSIZ];

extern void print_table();
extern int print_at_lex;
extern int dont_print;

extern int err_type;

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+|"-"{digit}+
float       {digit}+"."{digit}+|"-"{digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '+'; }
"-" 	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '-'; }
"*" 	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '*'; }
"/" 	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '/'; }
"%"     { strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '%'; }
"++"    { strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return INC; }
"--"    { strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return DEC; }

 /* Relational */
">"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '>'; }
"<"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '<'; }
">="	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return MTE; }
"<="	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return LTE; }
"=="	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return EQ; }
"!="	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return NE; }

 /* Assignment */
"="		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '='; }
"+="	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return ADDASGN; }
"-="	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return SUBASGN; }
"*="	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return MULASGN; }
"/="	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return DIVASGN; }
"%="	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return MODASGN; }

 /* Logical */
"&&"	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return AND; }
"||"	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return OR; }
"!"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return NOT; }

 /* Delimiters */
"("		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '('; }
")"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return ')'; }
"{"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '{'; }
"}"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '}'; }
"["		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return '['; }
"]"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return ']'; }
","		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return ','; }

 /* Print Keywords */	
"print"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return IF; }
"else"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return ELSE; }
"for"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return FOR; }
"while"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return WHILE; }

 /* Declaration Keywords */
"void"		{ yylval.string = yytext; strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return VOID; }
"int"		{ yylval.string = yytext; strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return INT; }
"float"  	{ yylval.string = yytext; strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return FLOAT; }
"string"  	{ yylval.string = yytext; strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return STRING; }
"bool"  	{ yylval.string = yytext; strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return BOOL; }

 /* boolean Keywords */
"true"      { strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return TRUE; }
"false"     { strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return FALSE; }

"return"    { strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return RETURN; }

 /* String Constant */
\"				        { strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); BEGIN STRING_STATE; return '\"'; }
<STRING_STATE>\"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); BEGIN INITIAL; return '\"'; }
<STRING_STATE>[^"]*		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return STR_CONST; }

 /* Number Constant */
{integer}	{ yylval.i_val = atoi(yytext); strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return I_CONST; }
{float}	    { yylval.f_val = atof(yytext); strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); }
<COMMENT>[^*\n]+	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); }
<COMMENT>\n			{  printf("%d: %s", yylineno, buf); strcpy(buf, ""); printf("\n"); }
<COMMENT>"*"		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); }
<COMMENT>"*/"		{  BEGIN INITIAL; strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); }

 /* C++ type Comment */
\/\/.*	{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); }

 /* Variable ID */
 {id}       { yylval.string = yytext; strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return ID; }

 /* others */

[;]         { strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); return SEMICOLON; }
[\n]        { if(!dont_print) {printf("%d: %s\n", yylineno, buf);}else{dont_print = 0;} if(print_at_lex){print_table(); print_at_lex = 0; } strcpy(buf, ""); }
[ \t]		{ strncat(buf, yytext, BUFSIZ - strlen(buf) - 1); } /* Ignore */
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     {  if(print_at_lex){print_table(); print_at_lex = 0; } return; }

%%

int yywrap()
{
    return 1;
}
